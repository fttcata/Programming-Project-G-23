// main class 

ArrayList<Flight> flights = new ArrayList<>();
ProcessingQueries pq;
int currentScreen = 0; // 0 = main screen, 1 = distance chart, 2 = origin chart, 3 = destination chart

void setup() {
  size(1200, 800);
  loadFlightData("flights100k(1).csv");
  pq = new ProcessingQueries(flights);
}

void draw() {
  background(0);

  if (currentScreen == 0) {
    drawMainScreen();
  } else if (currentScreen == 1) {
    drawDistanceChart();
  } else if (currentScreen == 2) {
    drawOriginChart();
  } else if (currentScreen == 3) {
    drawDestinationChart();
  }
}

void drawMainScreen() {
  // Display flight data
  fill(255);
  textSize(16);
  textAlign(LEFT);
  text("List of Flights:", 50, 50);
  for (int i = 0; i < min(20, flights.size()); i++) { // Display first 20 flights
    text(flights.get(i).toString(), 50, 100 + i * 20);
  }

  // Draw buttons
  drawButton("View Distance Chart", 50, 500, 200, 50);
  drawButton("View Origin Chart", 300, 500, 200, 50);
  drawButton("View Destination Chart", 550, 500, 200, 50);
}

void drawDistanceChart() {
  // Draw distance chart
  ArrayList<String> distanceCategories = new ArrayList<>();
  ArrayList<Integer> distanceCounts = new ArrayList<>();
  pq.countFlightByDistance(distanceCategories, distanceCounts);
  drawBarChart("Flight Distance Distribution", distanceCategories, distanceCounts, 50, 100, 1000, 600);

  // Draw back button
  drawButton("Back", 50, 700, 100, 50);
}

void drawOriginChart() {
  ArrayList<String> origins = new ArrayList<>();
  ArrayList<Integer> originCounts = new ArrayList<>();
  pq.countFlightByOriginAirport(origins, originCounts);
  
  // Get the top 10 origins
  ArrayList<String> topOrigins = new ArrayList<>();
  ArrayList<Integer> topOriginCounts = new ArrayList<>();
  getTopN(origins, originCounts, topOrigins, topOriginCounts, 10);

  drawBarChart("Top 10 Flights by Origin Airport", topOrigins, topOriginCounts, 100, 100, 1000, 600);
  
  // Back button
  drawButton("Back", 50, 700, 100, 50);
}

void drawDestinationChart() {
  ArrayList<String> destinations = new ArrayList<>();
  ArrayList<Integer> destinationCounts = new ArrayList<>();
  pq.countFlightByDestinationAirport(destinations, destinationCounts);
  
  // Get the top 10 destinations
  ArrayList<String> topDestinations = new ArrayList<>();
  ArrayList<Integer> topDestinationCounts = new ArrayList<>();
  getTopN(destinations, destinationCounts, topDestinations, topDestinationCounts, 10);

  drawBarChart("Top 10 Flights by Destination Airport", topDestinations, topDestinationCounts, 100, 100, 1000, 600);
  
  // Back button
  drawButton("Back", 50, 700, 100, 50);
}

void drawBarChart(String title, ArrayList<String> labels, ArrayList<Integer> values, float x, float y, float chartWidth, float chartHeight) {
  // Draw the bar chart
  fill(255);
  textSize(22);
  textAlign(CENTER);
  text(title, width / 2, 30);

  int maxVal = 0;
  for (int val : values) {
    if (val > maxVal) {
      maxVal = val;
    }
  }

  float barWidth = chartWidth / values.size();

  for (int i = 0; i < values.size(); i++) {
    float barHeight = map(values.get(i), 0, maxVal, 0, chartHeight);
    fill(100, 150, 255); // Bar color
    rect(x + i * barWidth, y + chartHeight - barHeight, barWidth - 5, barHeight);

    // Draw labels and values
    fill(255);
    textSize(12);
    textAlign(CENTER);
    text(labels.get(i), x + i * barWidth + barWidth / 2, y + chartHeight + 20); // Label below bar
    text(values.get(i), x + i * barWidth + barWidth / 2, y + chartHeight - barHeight - 10); // Value above bar
  }
}

void drawButton(String label, float x, float y, float w, float h) {
  fill(200);
  rect(x, y, w, h);
  fill(0);
  textSize(16);
  textAlign(CENTER, CENTER);
  text(label, x + w / 2, y + h / 2);
}

void mousePressed() {
  if (currentScreen == 0) {
    // Main screen buttons
    if (mouseX > 50 && mouseX < 250 && mouseY > 500 && mouseY < 550) {
      currentScreen = 1; // Distance chart
    } else if (mouseX > 300 && mouseX < 500 && mouseY > 500 && mouseY < 550) {
      currentScreen = 2; // Origin chart
    } else if (mouseX > 550 && mouseX < 750 && mouseY > 500 && mouseY < 550) {
      currentScreen = 3; // Destination chart
    }
  } else {
    // Back button
    if (mouseX > 50 && mouseX < 150 && mouseY > 700 && mouseY < 750) {
      currentScreen = 0; // Return to main screen
    }
  }
}

void loadFlightData(String filename) {
  String[] rows = loadStrings(filename);
  for (int i = 1; i < rows.length; i++) {
    String[] cols = split(rows[i], ",");
    if (cols.length >= 16) {
      Flight f = new Flight(cols[0], cols[1], cols[2], cols[3], cols[4],
          cols[5], cols[6], cols[7], cols[8], cols[9],
          cols[10], cols[11], cols[12], cols[13], cols[14], cols[15]);
      flights.add(f);
    }
  }
  println("Loaded " + flights.size() + " flights.");
}

void groupDataIntoRanges(ArrayList<String> labels, ArrayList<Integer> counts,
                         ArrayList<String> rangeLabels, ArrayList<Integer> rangeCounts, int rangeSize) {
  int maxCount = 0;
  for (int count : counts) {
    if (count > maxCount) {
      maxCount = count;
    }
  }

  // Create ranges
  for (int i = 0; i < maxCount; i += rangeSize) {
    int rangeStart = i;
    int rangeEnd = i + rangeSize - 1;
    rangeLabels.add(rangeStart + " - " + rangeEnd);
    rangeCounts.add(0);
  }

  // Count values in each range
  for (int i = 0; i < counts.size(); i++) {
    int count = counts.get(i);
    int rangeIndex = count / rangeSize;
    if (rangeIndex >= rangeCounts.size()) {
      rangeIndex = rangeCounts.size() - 1; // Handle values exceeding the last range
    }
    rangeCounts.set(rangeIndex, rangeCounts.get(rangeIndex) + 1);
  }
}
void getTopN(ArrayList<String> labels, ArrayList<Integer> counts, 
             ArrayList<String> topLabels, ArrayList<Integer> topCounts, int N) {
  
  // Create a list of (label, count) pairs
  ArrayList<int[]> sortedData = new ArrayList<>();
  for (int i = 0; i < labels.size(); i++) {
    sortedData.add(new int[] { i, counts.get(i) }); // Store index and count
  }

  // Sort based on count in descending order
  sortedData.sort((a, b) -> b[1] - a[1]); 

  // Take the top N and properly assign the labels
  for (int i = 0; i < min(N, sortedData.size()); i++) {
    int index = sortedData.get(i)[0]; // Get original index
    topLabels.add(labels.get(index)); // Correctly assign airport code
    topCounts.add(counts.get(index)); // Correctly assign count
  }
}



// chartdraw class

class ChartWindow extends PApplet {
  String title;
  ArrayList<String> labels;
  ArrayList<Integer> values;
  float x, y, chartWidth, chartHeight;

  ChartWindow(String title, ArrayList<String> labels, ArrayList<Integer> values,
              float x, float y, float chartWidth, float chartHeight) {
    this.title = title;
    this.labels = labels;
    this.values = values;
    this.x = x;
    this.y = y;
    this.chartWidth = chartWidth;
    this.chartHeight = chartHeight;
    PApplet.runSketch(new String[] { this.getClass().getSimpleName() }, this);
  }

  void settings() {
    size(1000, 1000); // Size of each chart window
  }

  void setup() {
    background(0);
    fill(255);
    textSize(22);
    textAlign(CENTER);
    text(title, width / 2, 30);
    drawBarChart(x, y + 50, chartWidth, chartHeight); // Draw the chart
  }

  void drawBarChart(float x, float y, float chartWidth, float chartHeight) {
  // Manually find the maximum value
  int maxVal = 0;
  for (int val : values) {
    if (val > maxVal) {
      maxVal = val;
    }
  }

  float barWidth = chartWidth / values.size();

  for (int i = 0; i < values.size(); i++) {
    // Calculate bar height
    float barHeight = map(values.get(i), 0, maxVal, 0, chartHeight);

    // Draw the bar
    fill(100, 150, 255); // Bar color
    rect(x + i * barWidth, y + chartHeight - barHeight, barWidth - 5, barHeight);

    // Draw labels below the bars
    fill(255);
    textSize(12);
    textAlign(CENTER);
    text(labels.get(i), x + i * barWidth + barWidth / 2, y + chartHeight + 20); // Label below bar

    // Draw values above the bars
    text(values.get(i), x + i * barWidth + barWidth / 2, y + chartHeight - barHeight - 10); // Value above bar
  }
}
}
