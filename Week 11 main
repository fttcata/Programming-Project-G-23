// main class 
String searchText="";
ArrayList<Flight> flights = new ArrayList<>();
ProcessingQueries pq;
int currentScreen = 0; // 0 = main screen, 1 = distance chart, 2 = origin chart, 3 = destination chart
PImage backgroundImage;
PImage destinationImage;
PImage originsImage;
PImage distanceImage;
PFont font;
void setup() 
{
  backgroundImage = loadImage("background.png");
  size(1200, 800);
  font = createFont("Arial", 32, true);
  textFont(font);
  loadFlightData("flights100k.csv");
  pq = new ProcessingQueries(flights);
  destinationImage = loadImage("destination.jpg");
  destinationImage.resize(1200,800);
  originsImage = loadImage("origins.jpg");
  originsImage.resize(1200,800);
  distanceImage = loadImage("Distance.jpg");
  distanceImage.resize(1200,800);
}

void draw() {
  background(0);

  if (currentScreen == 0) {
    drawMainScreen();
  } else if (currentScreen == 1) {
    drawDistanceChart();
  } else if (currentScreen == 2) {
    drawOriginChart();
  } else if (currentScreen == 3) {
    drawDestinationChart();
  }
}
void keyPressed() {
  if (key == BACKSPACE && searchText.length() > 0) {
    searchText = searchText.substring(0, searchText.length() - 1);
  } else if (key == ENTER || key == RETURN) {
    checkSearch();
  } else if (key >= 32 && key <= 126) { // Only allow normal characters
    searchText += key;
  }
}

// Function to check input and change screens
void checkSearch() {
  String lowerText = searchText.toLowerCase().trim(); // Normalize input

  if (lowerText.equals("distance")) {
    currentScreen = 1;
  } else if (lowerText.equals("destination")) {
    currentScreen = 3;
  } else if (lowerText.equals("origin")) {
    currentScreen = 2;
  }
}

void displayMultilineText(String txt, float x, float y, float maxWidth) {
  String[] words = txt.split(" ");  
  String line = "";
  float lineHeight = 20;  // Adjusted for better fit
  for (String word : words) {
    String testLine = line + word + " ";
    if (textWidth(testLine) > maxWidth) {
      text(line, x, y);
      y += lineHeight;  // Move to next line
      line = word + " ";
      
      // Prevent text from exceeding the search bar's height
      if (y > 780) break;
    } else {
      line = testLine;
    }
  }
  text(line, x, y); // Print remaining text
}
void drawSearchBar() {
  fill(0);
  rect(50, 720, 400, 60); // Larger search box for multi-line text
  textAlign(LEFT,CENTER);
  fill(255);
  displayMultilineText(searchText, 60, 750, 380); // Display multi-line text
}
void drawMainScreen() {
  
  backgroundImage.resize(1200,800);
  background(backgroundImage);
  // Display flight data
  text("Or alternatively, type which data you would like to see ('destination', 'origin', distance'):", 350, 700); 
  fill(255);
  textSize(16);
  textAlign(LEFT);
  text("Please choose the data type which you would like to see:", 50, 400);
  fill(255);
  textSize(20);
  textAlign(CENTER);
  text("Welcome to our flight data app where we took data from 100k flights around the whole United States.", 600, 50);
  fill(0);
  textSize(20);
  textAlign(RIGHT);
  text("Made by Group 23", 1150, 750);
  drawSearchBar();
  // Draw buttons
  drawButton("Flight Distances Chart", 50, 450, 300, 50);
  drawButton("Origin Airport Chart", 50, 500, 300, 50);
  drawButton("Destination Airport Chart", 50, 550, 300, 50);
}

void drawDistanceChart() {
  // Draw distance chart
  background(distanceImage);
  ArrayList<String> distanceCategories = new ArrayList<>();
  ArrayList<Integer> distanceCounts = new ArrayList<>();
  pq.countFlightByDistance(distanceCategories, distanceCounts);
  drawBarChart("Flight Distance Distribution", distanceCategories, distanceCounts, 50, 100, 1000, 600);

  textAlign(LEFT);
  textSize(20);
  text("Page 1/3", 50, 50);
  textSize(20);
  textAlign(RIGHT);
  text("Made by Group 23", 1150, 700);
  drawButton("Next", 1000, 750, 100,50);
  // Draw back button
  drawButton("Back", 50, 750, 100, 50);
}

void drawOriginChart() {
  background(originsImage);
  ArrayList<String> origins = new ArrayList<>();
  ArrayList<Integer> originCounts = new ArrayList<>();
  pq.countFlightByOriginAirport(origins, originCounts);
  
  // Get the top 10 origins
  ArrayList<String> topOrigins = new ArrayList<>();
  ArrayList<Integer> topOriginCounts = new ArrayList<>();
  getTopN(origins, originCounts, topOrigins, topOriginCounts, 10);
  textAlign(LEFT);
  textSize(20);
  text("Page 2/3", 50, 50);
  textFont(font);
  drawPieChart("Top 10 Flights by Origin Airport", topOrigins, topOriginCounts, width / 2, height / 2, 500);
  textSize(20);
  textAlign(RIGHT);
  text("Made by Group 23", 1150, 700);
  // Back button
  drawButton("Next", 1000, 750, 100, 50);
  drawButton("Back", 50, 750, 100, 50);
}

void drawDestinationChart() {
  background(destinationImage);
  ArrayList<String> destinations = new ArrayList<>();
  ArrayList<Integer> destinationsCounts = new ArrayList<>();
  pq.countFlightByDestinationAirport(destinations, destinationsCounts);
  
  // Get the top 10 origins
  ArrayList<String> topDestinations = new ArrayList<>();
  ArrayList<Integer> topDestinationCounts = new ArrayList<>();
  getTopN(destinations, destinationsCounts, topDestinations, topDestinationCounts, 10);

  drawLineChart("Top 10 Flights by Destination Airport", topDestinations, topDestinationCounts, 100, 100, 1000, 500);
  textAlign(LEFT);
  textSize(20);
  text("Page 3/3", 50, 50);
  textSize(20);
  textAlign(RIGHT);
  text("Made by Group 23", 1150, 700);
  // Back button
  drawButton("Back", 50, 750, 100, 50);
}

void drawBarChart(String title, ArrayList<String> labels, ArrayList<Integer> values, float x, float y, float chartWidth, float chartHeight) {
  // Draw the bar chart
  fill(0);
  textSize(22);
  textAlign(CENTER);
  text(title, width / 2, 30);

  int maxVal = 0;
  for (int val : values) {
    if (val > maxVal) {
      maxVal = val;
    }
  }

  float barWidth = chartWidth / values.size();

  for (int i = 0; i < values.size(); i++) {
    float barHeight = map(values.get(i), 0, maxVal, 0, chartHeight);
    textFont(font);
    fill(0, 0, 0, 100); // Bar color
    rect(x + i * barWidth, y + chartHeight - barHeight, barWidth - 5, barHeight);

    // Draw labels and values
    fill(0);
    textSize(12);
    textAlign(CENTER);
    text(labels.get(i), x + i * barWidth + barWidth / 2, y + chartHeight + 20); // Label below bar
    text(values.get(i), x + i * barWidth + barWidth / 2, y + chartHeight - barHeight - 10); // Value above bar
  }
}

void drawPieChart(String title, ArrayList<String> labels, ArrayList<Integer> values, float centerX, float centerY, float diameter) {
  // Draw the chart title
  fill(0);
  textSize(22);
  textAlign(CENTER);
  text(title, width / 2, 30);

  // Total value
  float total = 0;
  for (int val : values) {
    total += val;
  }

  float startAngle = 0;
  for (int i = 0; i < values.size(); i++) {
    float angle = map(values.get(i), 0, total, 0, TWO_PI);

    // Assign unique color per slice
    fill(100 + i * 30 % 255, 150 + i * 50 % 255, 200 + i * 70 % 255);
    arc(centerX, centerY, diameter, diameter, startAngle, startAngle + angle, PIE);

    // Calculate label position
    float midAngle = startAngle + angle / 2;
    float labelX = centerX + cos(midAngle) * diameter / 2.5;
    float labelY = centerY + sin(midAngle) * diameter / 2.5;

    fill(0);
    textSize(12);
    textAlign(CENTER, CENTER);
    text(labels.get(i) + "\n(" + values.get(i) + ")", labelX, labelY);

    startAngle += angle;
  }
}


void drawButton(String label, float x, float y, float w, float h) {
  rectMode(CORNER);  
  fill (0);
  stroke(255, 0, 0);  // Red border for debugging
  rect(x, y, w, h);  
  noStroke();
  
  fill(255);
  textSize(16);
  textAlign(CENTER, CENTER);
  text(label, x + w / 2, y + h / 2);
}

void drawLineChart(String title, ArrayList<String> labels, ArrayList<Integer> values, float x, float y, float chartWidth, float chartHeight) {
  fill(0);
  textSize(22);
  textAlign(CENTER);
  text(title, width / 2, 30);

  // Background box behind the chart
  fill(245); // Light gray background
  noStroke();
  rect(x - 40, y - 20, chartWidth + 80, chartHeight + 60);

  // Axis lines
  stroke(0);
  strokeWeight(1);
  line(x, y, x, y + chartHeight);           // Y-axis
  line(x, y + chartHeight, x + chartWidth, y + chartHeight); // X-axis

  // Find max value
  int maxVal = 0;
  for (int val : values) {
    if (val > maxVal) {
      maxVal = val;
    }
  }

  float pointSpacing = chartWidth / (values.size() - 1);

  // Draw line chart
  stroke(50, 100, 200);
  strokeWeight(2);
  noFill();
  beginShape();
  for (int i = 0; i < values.size(); i++) {
    float px = x + i * pointSpacing;
    float py = y + chartHeight - map(values.get(i), 0, maxVal, 0, chartHeight);
    vertex(px, py);
  }
  endShape();

  // Draw points and labels
  fill(0);
  textSize(12);
  textAlign(CENTER);
  for (int i = 0; i < values.size(); i++) {
    float px = x + i * pointSpacing;
    float py = y + chartHeight - map(values.get(i), 0, maxVal, 0, chartHeight);

    fill(255, 0, 0);
    ellipse(px, py, 8, 8);

    fill(0);
    text(values.get(i), px, py - 12); // value
    text(labels.get(i), px, y + chartHeight + 15); // label
  }
}


void mousePressed() {
  if (currentScreen == 0) {
    // Main screen buttons
    if (mouseX > 50 && mouseX < 300 && mouseY > 450 && mouseY < 500) {
      currentScreen = 1; // Distance chart
    } else if (mouseX > 50 && mouseX < 300 && mouseY > 500 && mouseY < 550) {
      currentScreen = 2; // Origin chart
    } else if (mouseX > 50 && mouseX < 300 && mouseY > 550 && mouseY < 600) {
      currentScreen = 3; // Destination chart
    }
  } else {
    // Back button
    if (mouseX > 50 && mouseX < 150 && mouseY > 750 && mouseY < 800 && currentScreen == 1) {
      currentScreen = 0; // Return to main screen
    }
    else if (mouseX > 1000 && mouseX < 1150 && mouseY > 750 && mouseY < 800 && currentScreen == 1)
    {
      currentScreen = 2;
    }
    else if (mouseX > 1000 && mouseX < 1150 && mouseY > 750 && mouseY < 800 && currentScreen == 2)
    {
      currentScreen = 3;
    }
    if (mouseX > 50 && mouseX < 150 && mouseY > 750 && mouseY < 800 && currentScreen == 2) {
      currentScreen = 1; // Return to main screen
    }
    if (mouseX > 50 && mouseX < 150 && mouseY > 750 && mouseY < 800 && currentScreen == 3) {
      currentScreen = 2; // Return to main screen
    }
  }
}

void loadFlightData(String filename) {
  String[] rows = loadStrings(filename);
  for (int i = 1; i < rows.length; i++) {
    String[] cols = split(rows[i], ",");
    if (cols.length >= 16) {
      Flight f = new Flight(cols[0], cols[1], cols[2], cols[3], cols[4],
          cols[5], cols[6], cols[7], cols[8], cols[9],
          cols[10], cols[11], cols[12], cols[13], cols[14], cols[15]);
      flights.add(f);
    }
  }
  println("Loaded " + flights.size() + " flights.");
}

void groupDataIntoRanges(ArrayList<String> labels, ArrayList<Integer> counts,
                         ArrayList<String> rangeLabels, ArrayList<Integer> rangeCounts, int rangeSize) {
  int maxCount = 0;
  for (int count : counts) {
    if (count > maxCount) {
      maxCount = count;
    }
  }

  // Create ranges
  for (int i = 0; i < maxCount; i += rangeSize) {
    int rangeStart = i;
    int rangeEnd = i + rangeSize - 1;
    rangeLabels.add(rangeStart + " - " + rangeEnd);
    rangeCounts.add(0);
  }

  // Count values in each range
  for (int i = 0; i < counts.size(); i++) {
    int count = counts.get(i);
    int rangeIndex = count / rangeSize;
    if (rangeIndex >= rangeCounts.size()) {
      rangeIndex = rangeCounts.size() - 1; // Handle values exceeding the last range
    }
    rangeCounts.set(rangeIndex, rangeCounts.get(rangeIndex) + 1);
  }
}
void getTopN(ArrayList<String> labels, ArrayList<Integer> counts, 
             ArrayList<String> topLabels, ArrayList<Integer> topCounts, int N) {
  
  // Create a list of (label, count) pairs
  ArrayList<int[]> sortedData = new ArrayList<>();
  for (int i = 0; i < labels.size(); i++) {
    sortedData.add(new int[] { i, counts.get(i) }); // Store index and count
  }

  // Sort based on count in descending order
  sortedData.sort((a, b) -> b[1] - a[1]); 

  // Take the top N and properly assign the labels
  for (int i = 0; i < min(N, sortedData.size()); i++) {
    int index = sortedData.get(i)[0]; // Get original index
    topLabels.add(labels.get(index)); // Correctly assign airport code
    topCounts.add(counts.get(index)); // Correctly assign count
  }
}
