// main class 

ArrayList<Flight> flights = new ArrayList<>();
ChartDraw distanceChart;
ChartDraw originChart;
ChartDraw destinationChart;

void setup() {
  size(1200, 800); 
  loadFlightData("flights100k.csv"); 
  ProcessingQueries pq = new ProcessingQueries(flights);

  // Count flights by origin airport (grouped into ranges)
  ArrayList<String> origins = new ArrayList<>();
  ArrayList<Integer> originCounts = new ArrayList<>();
  pq.countFlightByOriginAirport(origins, originCounts);
  ArrayList<String> originRanges = new ArrayList<>();
  ArrayList<Integer> originRangeCounts = new ArrayList<>();
  groupDataIntoRanges(origins, originCounts, originRanges, originRangeCounts, 10);

  // Count flights by destination airport (grouped into ranges)
  ArrayList<String> destinations = new ArrayList<>();
  ArrayList<Integer> destinationCounts = new ArrayList<>();
  pq.countFlightByDestinationAirport(destinations, destinationCounts);
  ArrayList<String> destinationRanges = new ArrayList<>();
  ArrayList<Integer> destinationRangeCounts = new ArrayList<>();
  groupDataIntoRanges(destinations, destinationCounts, destinationRanges, destinationRangeCounts, 10); // Group into ranges of 10

  // Count flights by distance
  ArrayList<String> distanceCategories = new ArrayList<>();
  ArrayList<Integer> distanceCounts = new ArrayList<>();
  pq.countFlightByDistance(distanceCategories, distanceCounts);

  // Initialize charts
  distanceChart = new ChartDraw(distanceCategories, distanceCounts);
  originChart = new ChartDraw(originRanges, originRangeCounts);
  destinationChart = new ChartDraw(destinationRanges, destinationRangeCounts);
}
int buttonWidth = 200, buttonHeight = 50;
String[] buttonLabels = { "Distance Chart", "Origin Chart", "Destination Chart" };
int currentScreen = -1; // -1: Show buttons, 0: Distance, 1: Origin, 2: Destination

void draw() {
  background(0);
  fill(255);
  textSize(22);
  textAlign(CENTER);
  
 if (currentScreen == -1) {
    // Show the buttons only
    drawButtons();
  } else {
    // Draw the selected chart
    if (currentScreen == 0) {
      text("Flight Distance Distribution", width / 2, 100);
      distanceChart.drawBarChart(300, 150, 600, 400);
    } else if (currentScreen == 1) {
      text("Flights by Origin Airport (Ranges)", width / 2, 100);
      originChart.drawBarChart(300, 150, 600, 400);
    } else if (currentScreen == 2) {
      text("Flights by Destination Airport (Ranges)", width / 2, 100);
      destinationChart.drawBarChart(300, 150, 600, 400);
    }
    
    // Draw back button
    drawBackButton();
  }
}

void drawButtons() {
  for (int i = 0; i < 3; i++) {
    fill(100, 150, 255);
    rect(50 + i * (buttonWidth + 20), 200, buttonWidth, buttonHeight);
    fill(255);
    textSize(16);
    textAlign(CENTER, CENTER);
    text(buttonLabels[i], 50 + i * (buttonWidth + 20) + buttonWidth / 2, 200 + buttonHeight / 2);
  }
}

void drawBackButton() {
  fill(200, 50, 50);
  rect(50, 50, 100, 40);
  fill(255);
  textSize(16);
  textAlign(CENTER, CENTER);
  text("Back", 100, 70);
}

void mousePressed() {
  if (currentScreen == -1) {
    // Check if any of the chart buttons are clicked
    for (int i = 0; i < 3; i++) {
      if (mouseX > 50 + i * (buttonWidth + 20) && mouseX < 50 + i * (buttonWidth + 20) + buttonWidth &&
          mouseY > 200 && mouseY < 200 + buttonHeight) {
        currentScreen = i;
      }
    }
  } else {
    // Check if "Back" button is clicked
    if (mouseX > 50 && mouseX < 150 && mouseY > 50 && mouseY < 90) {
      currentScreen = -1; // Return to main menu
    }
  }
}

void loadFlightData(String filename) {
  String[] rows = loadStrings(filename);
  for (int i = 1; i < rows.length; i++) {
    String[] cols = split(rows[i], ",");
    if (cols.length >= 16) {
      Flight f = new Flight(cols[0], cols[1], cols[2], cols[3], cols[4],
          cols[5], cols[6], cols[7], cols[8], cols[9],
          cols[10], cols[11], cols[12], cols[13], cols[14], cols[15]);
      flights.add(f);
    }
  }
  println("Loaded " + flights.size() + " flights.");
}

// Helper function to group data into ranges
void groupDataIntoRanges(ArrayList<String> labels, ArrayList<Integer> counts,
                         ArrayList<String> rangeLabels, ArrayList<Integer> rangeCounts, int rangeSize) {
  int maxCount = 0;
  for (int count : counts) {
    if (count > maxCount) {
      maxCount = count;
    }
  }

  // Create ranges
  for (int i = 0; i < maxCount; i += rangeSize) {
    int rangeStart = i;
    int rangeEnd = i + rangeSize - 1;
    rangeLabels.add(rangeStart + " - " + rangeEnd);
    rangeCounts.add(0);
  }

  // Count values in each range
  for (int i = 0; i < counts.size(); i++) {
    int count = counts.get(i);
    int rangeIndex = count / rangeSize;
    if (rangeIndex >= rangeCounts.size()) {
      rangeIndex = rangeCounts.size() - 1; // Handle values exceeding the last range
    }
    rangeCounts.set(rangeIndex, rangeCounts.get(rangeIndex) + 1);
  }
}
